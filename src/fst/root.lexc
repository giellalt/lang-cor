!! !!!Cornish morphology

!! First, we declare multicharacter symbols
Multichar_Symbols

!! !!POS
+N +V +A           !!= * @CODE@
+Adv +CC +CS +Interj +Pron +Num +Pr         !!= * @CODE@
+Smut +Mmut +Pmut +Amut               !!= * @CODE@ for mutation
+Symbol !!≈ * @CODE@ = independent symbols in the text stream, like £, €, ©


!! !!Verbal MSP
+Prs +Fut +Prt +Prf +Ipf +Plf       !!= @CODE@
+Ind +Imp +Sbj       !!= @CODE@
+Inf +Sit ! what is +Sit?       !!= @CODE@
+Pos +Neg +ConNeg       !!= @CODE@
+1Sg +2Sg +3Sg +1Pl +2Pl +3Pl       !!= @CODE@
+Impers       !!= @CODE@
+Ptc       !!= @CODE@
+VN       !!= @CODE@

!! !!Nominal MSP
+Sg +Pl +P            !!= @CODE@
+Nom +Acc +Gen        !!= @CODE@
+Ord       !!= @CODE@

!! !!Pronominal MSP
+Suff +Emph +Indef         !!= @CODE@
+Msc +Fem                  !!= @CODE@

!! Diacritical marks, to trigger
!! morphophonological rules.
!! The "%" symbol literalises the next symbol

%^S %^A %^P %^M %^V %^E        !!= @CODE@
%> %^D                         !!= @CODE@
%^UML %^CD %^TRUNC %^STDEL     !!= @CODE@

!! !!Archiphonemes
 e3           !!= @CODE@  e to o in plural
 a4 o4        !!= @CODE@ Umlaut phonemes, changing to e


        !! !!Symbols that need to be escaped on the lower side (towards twolc):
 »7     !!≈ ; @CODE@ : Literal »
 «7     !!≈ ; @CODE@ : Literal «
        !! {{{
 %[%>%] !!= @CODE@ - Literal >
 %[%<%] !!= @CODE@ - Literal <
        !! }}}


!! !!Flag diacritics
!! We have manually optimised the structure of our lexicon using following
!! flag diacritics to restrict morhpological combinatorics - only allow compounds
!! with verbs if the verb is further derived into a noun again:
 @P.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @D.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @C.NeedNoun@       !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
!! 
!! For languages that allow compounding, the following flag diacritics are needed
!! to control position-based compounding restrictions for nominals. Their use is
!! handled automatically if combined with +CmpN/xxx tags. If not used, they will
!! do no harm.
 @P.CmpFrst.FALSE@ !!≈ | @CODE@ | Require that words tagged as such only appear first
 @D.CmpPref.TRUE@  !!≈ | @CODE@ | Block such words from entering ENDLEX
 @P.CmpPref.FALSE@ !!≈ | @CODE@ | Block these words from making further compounds
 @D.CmpLast.TRUE@  !!≈ | @CODE@ | Block such words from entering R
 @D.CmpNone.TRUE@  !!≈ | @CODE@ | Combines with the next tag to prohibit compounding
 @U.CmpNone.FALSE@ !!≈ | @CODE@ | Combines with the prev tag to prohibit compounding
 @P.CmpOnly.TRUE@  !!≈ | @CODE@ | Sets a flag to indicate that the word has passed R
 @D.CmpOnly.FALSE@ !!≈ | @CODE@ | Disallow words coming directly from root.
!! 
!! Use the following flag diacritics to control downcasing of derived proper
!! nouns (e.g. Finnish Pariisi -> pariisilainen). See e.g. North Sámi for how to use
!! these flags. There exists a ready-made regex that will do the actual down-casing
!! given the proper use of these flags.
 @U.Cap.Obl@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.
 @U.Cap.Opt@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.


!! !!!Key lexicon
!     ===========

! This is the start lexicon.
LEXICON Root        !!= * @CODE@

Adverb ;
Noun ;
Propernoun ;
Preposition ;
Conjunction ;
Subjunction ;
Verb ;
Adjective ;
Interjection ;
!Numeral ;
Pronoun ;
Punctuation ;
Symbols     ;


! Adhoc lexica, to be fixed


