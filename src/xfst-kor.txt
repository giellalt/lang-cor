! Cornish grammar file

echo << We define our definitions >>

! ^S = 2 = soft mutation
! ^A = 3 = breathed mutation
! ^P = 4 = hard mutation
! ^M = 5 = mixed mutation
! ^V = vowel affection
! ^E = triggers o to e in agent suffix

define Dummy [ %^S | %^A | %^P | %^M | %^V | %^E | %> ] ;
define Vow   [ a | e |  i | o | u | y ] ;
define Cns   [ b | c | d | f | g | h | j | k | l | m | n | p | q | r | s | 
               t | v | w | x | z ] ;
define Sgm   [ Vow | Cns ] ;

echo << We define our rules >>

define identity [ g -> g || .#. _ ] ;

define gsoft [ g -> 0 || .#. %^S _ [a|e|i|l|r|w|y] ] ;

define gmixed [ g -> h || .#. %^M _ [a|e|i|w|y] ] ;

define softmut [ p -> b , t -> d , k -> g , 
                 b -> v , d -> d h , 
                 m -> v , c h -> j || .#. %^S _ ] ;

define gwsimplification [ w -> 0 || .#. (Dummy - %^S) g _ (r) [o|u] ] ;

define aspmut [ p -> f, t -> t h || .#. %^A _ ] ;

define kaspmut [ k -> h || .#. %^A _ ~[l|r] ] ;

define prov [ b -> p, d -> t, g -> k || .#. %^P _ ] ;

define mixed [ b -> f, d -> t, m -> f || .#. %^M _ ] ;

define DummyDeletion [ Dummy -> 0 ] ;

define VowelAffection [ a -> e, e -> y, o -> e || _ [ Sgm | Dummy ]*
%^V ] ;

define Devoicing [ v -> f || _ .#. ] ;

define OtoE [ o -> e || _ [ r %^E ] ] ;

echo << We compile >>

read regex [ identity
.o. gsoft
.o. gmixed
#.o. gtohw
.o. softmut 
.o. gwsimplification
.o. aspmut 
.o. kaspmut 
.o. prov
.o. mixed
.o. VowelAffection
.o. Devoicing
.o. OtoE
.o. DummyDeletion 
] ;
